{"version":3,"sources":["crown.png","Piece.js","Box.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Piece","props","className","piece","player","onClick","e","setMovables","crowned","src","crown","alt","Box","bg","movable","move","position","stopPropagation","initialState","count","one","two","killed","turn","selectedPiece","movablePositions","board","winner","Board","resetBoard","initBoard","populateBoard","setState","toggleTurn","state","clearMovables","dimension","rowIndex","row","colIndex","push","selectPiece","hasPiece","hasTurn","getPieceByPosition","map","targetPosition","targetBox","tempState","selectedBox","interimPiece","getPieceBetween","bound","getMovablePositionsForPiece","length","console","log","getNextPositionBy","top","right","recursive","mirror","index","colBoundForPlayerOne","colBoundForPlayerTwo","rowBound","nextPiece","filter","Number","isInteger","playerRowMap","boardRow","box","includes","id","this","i","key","j","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a6bacf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crown.87581c70.png\";","import React from 'react';\nimport crown from \"./crown.png\";\n\nfunction Piece(props) {\n    return (\n        <div\n            className={\"circle \" + props.piece.player}\n            onClick={e => props.setMovables(props.piece, e)}\n        >\n            {props.piece.crowned ? <img className=\"crown\" src={crown} alt=\"crown\"></img> : \"\"}\n        </div>\n    );\n}\n\nexport default Piece;\n","import React from \"react\";\nimport Piece from \"./Piece\";\n\nconst Box = props => {\n\n    const setMovables = (piece, e) => {\n        e.stopPropagation();\n        props.setMovables(piece);\n    };\n\n    return (\n        <div\n            className={\"box \" + props.bg + (props.movable ? \" movable\" : \"\")}\n            onClick={() => props.move({\n                ...props.position\n            })}\n        >\n            {props.piece ?\n                <Piece\n                    setMovables={setMovables}\n                    piece={props.piece}\n                /> :\n                \"\"\n            }\n        </div>\n    );\n}\n\nexport default Box;","import React, { Component } from \"react\";\nimport Box from \"./Box\";\nimport \"./Board.css\";\n\nconst initialState = {\n    count: {\n        one: 12,\n        two: 12\n    },\n    killed: false,\n    turn: \"one\",\n    selectedPiece: null,\n    movablePositions: [],\n    board: [],\n    winner: null\n};\n\nclass Board extends Component {\n    constructor() {\n        super();\n\n        const board = this.initBoard(this.populateBoard());\n        this.state = {\n            ...initialState,\n            board\n        };\n    }\n\n    resetBoard = () => {\n        const board = this.initBoard(this.populateBoard());\n        this.setState({\n            ...initialState,\n            board\n        });\n    }\n\n    toggleTurn = () => this.setState({\n        turn: this.state.turn === \"one\" ? \"two\" : \"one\",\n        killed: false,\n    }, () => this.clearMovables());\n\n    populateBoard = () => {\n        const board = [];\n        const dimension = {\n            numRows: 8,\n            numCols: 8\n        };\n\n        let bg = \"black\";\n\n        for (let rowIndex = 0; rowIndex < dimension.numRows; rowIndex++) {\n            const row = [];\n\n            for (let colIndex = 0; colIndex < dimension.numCols; colIndex++) {\n                if (colIndex !== 0) {\n                    bg = bg === \"black\" ? \"white\" : \"black\";\n                }\n                \n                row[colIndex] = {\n                    piece: null,\n                    bg\n                };\n            }\n\n            board.push(row);\n        }\n\n        return board;\n    }\n\n    selectPiece = selectedPiece => this.setState({\n            selectedPiece\n    });\n\n    hasPiece = position => this.state.board[position.rowIndex][position.colIndex].piece !== null;\n\n\n    hasTurn = player => player === this.state.turn;\n\n    getPieceByPosition = position => this.state.board[position.rowIndex][position.colIndex].piece;\n\n    clearMovables = () => {\n        const board = [...this.state.board];\n        this.state.movablePositions.map( position => board[position.rowIndex][position.colIndex].movable = false);\n        this.setState({\n            board\n        });\n    }\n\n    move = targetPosition => {\n        const board = [ ...this.state.board ];\n        const targetBox = board[targetPosition.rowIndex][targetPosition.colIndex];\n\n        if (!targetBox.movable) {\n            console.log(\"Not movable\");\n            return;\n        }\n\n        const selectedPiece = { ...this.state.selectedPiece };\n        const selectedBox = board[selectedPiece.position.rowIndex][selectedPiece.position.colIndex];\n\n        const interimPiece = this.getPieceBetween(selectedPiece.position, targetPosition);\n        const count = { ...this.state.count };\n        \n        let tempState;\n\n        if (interimPiece) {\n            if (interimPiece.player === \"one\") {\n                count.one--;\n                tempState = {\n                    count,\n                    winner: count.one === 0 ? \"two\" : null,\n                    killed: !this.state.killed\n                };\n\n            } else {\n                count.two--;\n                tempState = {\n                    count,\n                    winner: count.two === 0 ? \"two\" : null,\n                    killed: !this.state.killed\n                };\n            }\n\n            board[interimPiece.position.rowIndex][interimPiece.position.colIndex].piece = null;\n        }\n\n        selectedPiece.position = targetPosition;\n        targetBox.piece = selectedPiece;\n        targetBox.movable = false;\n        selectedBox.piece = null;\n\n        /**\n         * Let's crown the piece as he reached the opposite end\n         */\n        const bound = selectedPiece.player === \"one\" ? 7 : 0;\n        selectedPiece.crowned = selectedPiece.position.rowIndex === bound ? true : selectedPiece.crowned;\n\n        this.setState({\n            selectedPiece,\n            board,\n            ...tempState\n        }, () => {\n            this.clearMovables();\n\n            if (this.state.killed) {\n                this.setState({\n                    killed: !this.state.killed\n                }, () => {\n                    const movablePositions = this.getMovablePositionsForPiece(selectedPiece);\n                    if (movablePositions.length) {\n                        this.setMovables(selectedPiece);\n                    } else {\n                        this.toggleTurn();\n                    }\n                });\n            } else {\n                this.toggleTurn();\n            }\n        });\n    }\n\n    getNextPositionBy = (player, rowIndex, colIndex, top = true, right = true, recursive = true) => {\n        const mirror = index => 7 - index;\n        const colBoundForPlayerOne = right ? 0 : 7;\n        const colBoundForPlayerTwo = right ? 7 : 0;\n        const rowBound = top ? 7 : 0;\n        rowIndex = player === \"one\" ? rowIndex : mirror(rowIndex);\n\n        let position = null;\n\n        if (player === \"one\") {\n            if (colIndex !== colBoundForPlayerOne && rowIndex !== rowBound) { \n                position = {\n                    rowIndex: top ? rowIndex + 1 : rowIndex - 1,\n                    colIndex: right ? colIndex - 1 : colIndex + 1\n                }\n            }\n        } else {\n            if (colIndex !== colBoundForPlayerTwo && rowIndex !== rowBound) {\n                position = {\n                    rowIndex: top ? mirror(rowIndex + 1) : mirror(rowIndex - 1),\n                    colIndex: right ? colIndex + 1 : colIndex - 1\n                }\n            }\n        } \n\n        if (position) {\n            const nextPiece = this.getPieceByPosition(position);\n\n            if (nextPiece) {\n                if (player === nextPiece.player) {\n                    return null;\n                } else {\n                    if (recursive) {\n                        position = this.getNextPositionBy(player, position.rowIndex, position.colIndex, top, right, false);\n\n                        if (position && this.getPieceByPosition(position)) {\n                            return null;\n                        }\n                    }\n                }\n            }\n        }\n\n        return position;\n    }\n\n    setMovables = piece => {\n        if (!this.hasTurn(piece.player)) {\n            console.log(\"This is not your turn!\");\n            return;\n        }\n\n        this.selectPiece(piece);\n        const movablePositions = this.getMovablePositionsForPiece(piece);\n\n        if (movablePositions.length !== 0) {\n            this.clearMovables();\n            const board = [ ...this.state.board ];\n            movablePositions.map(position => board[position.rowIndex][position.colIndex].movable = true);\n            this.setState({\n                movablePositions,\n                board\n            });\n        } else {\n            console.log(\"The piece is not movable\");\n        }\n    }\n\n    getMovablePositionsForPiece = piece => {\n        const movablePositions = [];\n        const colIndex = piece.position.colIndex;\n        const rowIndex = piece.position.rowIndex;\n\n        movablePositions.push(this.getNextPositionBy(piece.player, rowIndex, colIndex, true, true));\n        movablePositions.push(this.getNextPositionBy(piece.player, rowIndex, colIndex, true, false));\n\n        if (piece.crowned) {\n            movablePositions.push(this.getNextPositionBy(piece.player, rowIndex, colIndex, false, true));\n            movablePositions.push(this.getNextPositionBy(piece.player, rowIndex, colIndex, false, false));\n        }\n\n        return  movablePositions.filter(position => position !== null);\n    }\n\n    getPieceBetween = (position, targetPosition) => {\n        const rowIndex = (position.rowIndex + targetPosition.rowIndex) / 2;\n\n        if (!Number.isInteger(rowIndex))\n            return null;\n\n        const colIndex = (position.colIndex + targetPosition.colIndex) / 2;\n\n        return this.getPieceByPosition({\n            rowIndex,\n            colIndex\n        });\n    }\n\n    initBoard = board => {\n        const playerRowMap = {\n            one: [ 0, 1, 2 ],\n            two: [ 5, 6, 7 ]\n        };\n\n        board = board.map((boardRow, rowIndex) => {\n            const row = boardRow.map((box, colIndex) => {\n                let player = null;\n                if (box.bg === \"black\") {\n                    if (playerRowMap.one.includes(rowIndex)) {\n                        player = 'one';\n                    }\n\n                    if (playerRowMap.two.includes(rowIndex)) {\n                        player = 'two';\n                    }\n                }\n\n                const piece = player ? {\n                    player,\n                    crowned: false,\n                    position: {\n                        rowIndex,\n                        colIndex\n                    }\n                } : null;\n\n                box =  {\n                    ...box,\n                    piece,\n                    movable: false,\n                };\n\n                return box;\n            });\n\n            return row;\n        });\n\n        return board;\n    }\n\n    render() {\n        return (\n            <div id=\"Board\">\n                <h1>Twisker Checkers Game!</h1>\n                <div className=\"board-wrapper\">\n                    <div className=\"checkers-board\">\n                        {this.state.board.map((row, i) => {\n                            return (\n                                <div className=\"row\" key={i}>\n                                    {row.map((box, j) => {\n                                        return (\n                                            <Box\n                                                position={{ rowIndex: i, colIndex: j }}\n                                                key={\"\" + i + j}\n                                                setMovables={this.setMovables}\n                                                move={this.move}\n                                                { ...box }\n                                            />\n                                        );\n                                    })}\n\n                                </div>\n                            );\n                        })}\n\n                    </div>\n                </div>\n\n                <div className=\"info\">\n                    <div className=\"currentPlayer\">\n                        <strong>Current Player:</strong>\n                        <span className={ \"circle \" + this.state.turn}></span>\n                    </div>\n                    <div className=\"pieceCount\">\n                        <span className=\"circle one\"></span> has&nbsp;\n                        <strong>{this.state.count.one}</strong> pieces left\n                    </div>\n                    <div className=\"pieceCount\">\n                        <span className=\"circle two\"></span> has&nbsp;\n                        <strong>{this.state.count.two}</strong> pieces left\n                    </div>\n                    <div className=\"winner\">\n                        Winner: { this.state.winner ? \n                            (<span className={\"circle \" + this.state.winner}></span>)\n                            : \"N/A\" }\n                    </div>\n                    <div>\n                        <button\n                            onClick={this.toggleTurn}\n                        >Toggle Turn</button>\n\n                        <button\n                            onClick={this.resetBoard}\n                        >Reset Board</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n} \n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}